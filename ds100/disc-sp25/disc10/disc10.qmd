---
title: SQL (will update once code works)
execute:
  echo: true
format:
  html:
    code-fold: true
    code-tools: true
    toc: true
    toc-title: SQL
    page-layout: full
    theme:
      - cosmo
      - cerulean
    callout-icon: false
jupyter: python3
---

## [Link to Slides](https://docs.google.com/presentation/d/1Tklg3xYEZZnPXktIVYed6vve1Ohfs3oWECMwbzYnJP8/edit?usp=sharing)

## Setup

```{python}
import pandas as pd
import numpy as np
import duckdb

%load_ext sql

conn = duckdb.connect()
conn.query("INSTALL sqlite")
%sql conn --alias duckdb
```


```{python}
# Run this cell to create the survey table for Q1
data = {'j_name': ['Llama Technician','Software Engineer','Open Source Maintainer','Big Data Engineer', 'Data Analyst', 'Analyst Intern'],
        'c_name': ["Google","Salesforce", "Github","Microsoft","Startup","Google"],
        'c_location' : ['Mountain View', 'SF', 'SF', 'Redmond', 'Berkeley', 'SF'],
        'm_name': ["Applied Math","ORMS","Computer Science", "Data Science", "Data Science","Philosophy"]
        }

survey = pd.DataFrame(data, columns = list(data.keys()))
```

```{python}
# Run this cell to create the tables for Q3
homes_data = {'home_id': [1,2,3,4,5,6],
        'city': ["Berkeley","San Jose","Berkeley","Berkeley","Berkeley", "Sunnyvale"],
        'bedrooms': [2,1,5,3,4,1],
        'bathrooms': [2,2,1,1,3,2],
        'area': [str(i) for i in [500,750,1000,1500,500,1000]] 
        }

homes = pd.DataFrame(homes_data, columns = list(homes_data.keys()))

transactions_data = {'home_id': [1,2,3,5],
        'buyer_id': [5,6,7,8],
        'seller_id': [8,7,6,5],
        'transaction_data': ['1/12/2001','4/14/2001','8/11/2001','12/21/2001'],
        'sale_price': [1000,500,750,1200]
        }

transactions = pd.DataFrame(transactions_data, columns = list(transactions_data.keys()))


buyers_data = {'buyer_id': [5,6,7,8],
        'name': ["Xiaorui","Conan","Rose","Brandon"],
        }

buyers = pd.DataFrame(buyers_data, columns = list(buyers_data.keys()))

seller_data = {'seller_id': [8,7,6,5],
        'name': ["Shreya","Emrie","Jake","Sam"],
        }

seller = pd.DataFrame(seller_data, columns = list(seller_data.keys()))
```

```{python}
# Run this cell to create the tables for Q4
cat_owners_data = {'id': [10,11,12],
        'name': ["Alice","Bob","Candice"],
        }

cat_owners = pd.DataFrame(cat_owners_data, columns = list(cat_owners_data.keys()))

cats_data = {'id': [51,52,53,54,55],
        'owner_id': [10, 10, 11, 11, 12],
        'name': ["Mittens","Whisker","Pishi","Lucky","Fluffy"],
        'breed' : ["Tabby","Black","Orange","Tabby","Black"],
        'age': [2,3,1,2,16]
        }

cats = pd.DataFrame(cats_data, columns = list(cats_data.keys()))
```

## SQL Syntax

All SQL queries should follow this basic framework. Note that the order of the clauses matter.

`SELECT [DISTINCT] ___<columns>___`

`FROM ___<tables>___`

`[WHERE ___<predicate>___]`

`[GROUP BY ___<columns>___]`

`[HAVING ___<predicate>___]`

`[ORDER BY ___<columns>___]`

`[LIMIT ___<number of rows>___]`

### Q1 
For this question, we will be working with the UC Berkeley Undergraduate Career Survey
dataset, named `survey`. Each year, the UC Berkeley Career Center surveys graduating seniors for their plans after graduating. Below is a sample of the full dataset that contains many
thousands of rows.

<center><img src="images/survey_table.png" width="600"></center>

```{python}
# Run this cell to create the survey table for Q1
data = {'j_name': ['Llama Technician','Software Engineer','Open Source Maintainer','Big Data Engineer', 'Data Analyst', 'Analyst Intern'],
        'c_name': ["Google","Salesforce", "Github","Microsoft","Startup","Google"],
        'c_location' : ['Mountain View', 'SF', 'SF', 'Redmond', 'Berkeley', 'SF'],
        'm_name': ["Applied Math","ORMS","Computer Science", "Data Science", "Data Science","Philosophy"]
        }

survey = pd.DataFrame(data, columns = list(data.keys()))
```

Each record of the `survey` table is an entry corresponding to a student. We have the job title,
company information, and the studentâ€™s major.

#### 1a
Write an SQL query that selects all data science major graduates that got jobs in Berkeley.
The result generated by your query should include all 4 columns.

```
# write your query here
```

<details>
<summary><b>Answer</b></summary>

```
SELECT * FROM survey
WHERE m_name = 'Data Science'
AND c_location = 'Berkeley';

```

</details>

#### 1b
Write an SQL query to find the top 2 most popular companies that data science graduates will work at, from most popular to 2nd most popular.

```

-- write your query here --
SELECT c_name, ____________ AS count
FROM survey
WHERE _____________ = 'Data Science'
GROUP BY ______________
ORDER BY ______________
LIMIT 2;

```

<details>
<summary><b>Answer</b></summary>

```{sql}
#| connection: con

```

</details>

## Joins 

<center><img src="images/joins.png" width = 400></center>

Note: You do not need the JOIN keyword to join SQL tables. The following are equivalent:

    `SELECT column1, column2`

    `FROM table1, table2`

    `WHERE table1.id = table2.id;`
    


    `SELECT column1, column2`

    `FROM table1 JOIN table2` 

    `ON table1.id = table2.id;`

### Q2 

In the figure above, assume `table1` has $m$ records, while `table2` has $n$ records. Describe which records are returned from each type of join. What is the **maximum** possible number of records returned in each join? Consider the cases where on the joined field, (1) both tables have unique values, and (2) both tables have duplicated values. Finally, what is the **minimum** possible number of records returned in each join?

_Write your answer in this cell_ 

### Q3



Consider the following real estate schema (underlined column names have unique values and no duplicates):

* <code> homes(<u>home_id int</u>, city text, bedrooms int, bathrooms int,
area text) </code>
* <code> transactions(<u>home_id int, buyer_id int, seller_id int, transaction_date date</u>, sale_price int) </code>
* <code> buyers(<u>buyer_id int</u>, name text) </code>
* <code> sellers(<u>seller_id int</u>, name text) </code>

Fill in the blanks in the SQL query to find the `home_id`, `selling price`, and `area` for each home in Berkeley with an area greater than 600. If the home has not been sold yet and has an area greater than 600, it should still be included in the table with **the price as None**.

```
-- fill in the blanks --
SELECT 
FROM _________
_________ JOIN _________
ON _______________
WHERE _______________;
```

## More SQL Queries
### Q4

Examine this schema for these two tables:

    CREATE TABLE cat_owners (
        id integer, 
        name text, 
        age integer,
        PRIMARY KEY (id)
    ); 

    CREATE TABLE cats (
        id integer
        owner_id integer, 
        name text, 
        breed text, 
        age integer, 
        PRIMARY KEY (id),
        FOREIGN KEY (owner_id) REFERENCES cat_owners
    );

#### 4a
Write an SQL query to create an almost identical table as cats, except with an additional
column `Nickname` that has the value "Kitten" for cats less than or equal to the age of 1,
"Catto" for cats between 1 and 15, and "Wise One" for cats older than or equal to 15

```
-- write your query here --
```

#### 4b
Considering only cats with ages strictly greater than 1, write an SQL query that returns the `owner_ids` of owners that own more than one cat.

```
-- write your query here --
```

#### 4c
Write an SQL query that returns the total number of cats each `owner_id` owns sorted by the number of cats in descending order. There should be two columns (`owner_id` and `num_cats`).

```
-- write your query here --
```

#### 4d
Write an SQL query to figure out the names of all of the cat owners who have a cat
named Pishi. 

```
-- write your query here --
```

#### 4e
It is possible to have a cat with an owner not in the `cat_owners` table? Explain your answer.

_Write your answer in this cell_ 

#### 4f
Write an SQL query to select all rows from the `cats` table that have cats of
the top 2 most popular cat breeds.

```

-- write your query here --
```


